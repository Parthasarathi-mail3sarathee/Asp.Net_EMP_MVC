@using Newtonsoft.Json;
@model StudentViewModel;
@{

    ViewData["Title"] = "Home Page";
    string resultPager = JsonConvert.SerializeObject(ViewBag.pager, Formatting.None);


}
<script>

    function pushPager(pagerObj) {
        pager = pagerObj;
    }

    function EmpListView(pager) {

        var vewEmpParamData = { pager: pager }

        jQuery.post("../Employee/GetDashboard", vewEmpParamData, function(resultData, status) {
            jQuery(".container.body-content").html(resultData);
        });


    }
</script>
@Html.Hidden("SessionSet", (string)ViewBag.NotValidUser)
<button type="submit" id="Logout" value="Logout" class="lgout" onclick="location.href='@Url.Action("Logout", "Home")'">
    Logout
    <img class="buttontbldeleteimage" src="~/images/logout.png" />
</button>
<div class="EmpContainer">

    Add Employee
    <button type="submit" value="Employee List" class="buttontblAdd" onclick="EmpListView(@resultPager)">
        Go Back to List View
        <img class="buttontbladdimage" src="~/images/emp list.png" />
    </button>
    <h2>Employee Details</h2>
    <div> <span class="msgInner">@ViewBag.msg</span></div>
    <form method="post" id="frmAddEmp">
        <div class="rowform odd">
            <div class="columnform">

                <div class="form-group">
                    @Html.LabelFor(m => m.Name)
                    @Html.TextBoxFor(m => m.Name, new { @id="txtName" , @class = "form-control" })

                </div>

            </div>
            <div class="columnform">

                <div class="form-group">
                    @Html.LabelFor(m => m.Address)
                    @Html.TextBoxFor(m => m.Address, new { @id="txtAdrs" ,  @class = "form-control" })
                    <span id="validTxtName" class="msg"></span>
                </div>
            </div>
        </div> <div class="rowform">
            <div class="columnform">

                <div class="form-group">
                    @Html.LabelFor(m => m.Role)
                    @Html.TextBoxFor(m => m.Role, new { @id="txtrole" ,@class = "form-control" })
                    <span id="validTxtRole" class="msg">Enter valid Role not more than 6 char</span>
                </div>

            </div>
            <div class="columnform">

                <div class="form-group">
                    @Html.LabelFor(m => m.Department)
                    @Html.TextBoxFor(m => m.Department, new { @id="txtdpt" , @class = "form-control" })
                </div>
            </div>
        </div>
        <div class="rowform odd">
            <div class="columnform">

                <div class="form-group">
                    @Html.LabelFor(m => m.Email)
                    @Html.TextBoxFor(m => m.Email, new { @id="txtEmail", @class = "form-control" })
                    <span id="validTxtemail" class="msg">Enter valid email id</span>
                </div>

            </div>
            <div class="columnform">

                <div class="form-group">
                    @Html.LabelFor(m => m.DOB)
                    @Html.TextBoxFor(m => m.DOB, new { Name = "txtDOB", id = "txtDOB", @class = "form-control datepicker" })

                </div>
            </div>
        </div>
        <div class="rowform">
            <div class="columnform">
                <div class="form-group">
                    @Html.LabelFor(m => m.DOJ)
                    @Html.TextBoxFor(m => m.DOJ, new { Name = "txtDOJ", id = "txtDOJ", @class = "form-control datepicker" })
                </div>
            </div>
            <div class="columnform">
                <div class="form-group">
                    @Html.LabelFor(m => m.SkillSets)
                    <span id="validTxtSkill" class="msg">Enter atleast one skill</span>
                    <input type="text" id="txtSkill" name="txtSkill" /><button type="button" id="tbnskilladd" name="tbnskilladd">+</button>
                    <div id="DivSkillset">
                        @if (Model.SkillSets != null)
                        {
                            foreach (var skill in Model.SkillSets)
                            {
                                <span class="skilsetSpan">@skill <button type="button" class="removeSkill">X</button></span>
                            }

                        }

                    </div>
                </div>
            </div>
        </div>

        <div class="rowform">
            <div class="columnform"> <input type="file" id="profileFile" name="profileFile" multiple="multiple" required /> </div>
            <div class="columnform"> </div>
        </div>
        <div class="rowform odd">
            <div class="columnform">
                @Html.HiddenFor(m => m.ID)
                <button type="button" id="btnSave" class="btn btn-primary">Save Employee</button>
            </div>
            <div class="columnform">
                <button type="reset" class="btn btn-primary">Clear field</button>
            </div>
        </div>
    </form>
</div>
